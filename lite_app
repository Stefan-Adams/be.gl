#!/usr/bin/env perl
use Mojolicious::Lite;
use Digest::MD5 qw(md5_hex);
use Mojo::Redis2;
use Mojo::JSON 'j';

use Hash::Diff qw(left_diff);

plugin 'AssetPack';

app->asset('begl.js' => 'https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js', 'js/reconnecting-websocket.js', 'js/markerWithLabels.js');
app->asset('begl.css' => 'css/normalize.css', 'css/main.css');
app->sessions->default_expiration(86400*365*10);

our $pals = {};

helper redis => sub { shift->stash->{redis} ||= Mojo::Redis2->new; };
helper pal_name => sub {
  my ($c, $pal, $ll) = @_;
  my $pals = $c->session('pals') || {};
  $ll = "$ll->[0],$ll->[1]";
  my $pal_name = $pals->{$pal} || $ll;
  warn "Pal ($ll): $pal_name" unless $pal_name eq $ll;
  return $ll => $pal_name;
};

sub code { substr(md5_hex(scalar localtime),int(rand(32-$_[0])),$_[0]) }

if ( $ENV{REDIS_CLEAR} ) {
  app->log->info("Clearing redis");
  app->redis->del($_) foreach app->redis->keys("pals.*");
}

get '/' => sub {
  my $c = shift;
  my $length = 3;
  $c->session(code => code(3)) unless $c->session('code');
  $c->render('index');
};

post '/addpal' => sub {
  my $c = shift;
  my $code = $c->param('code') or return $c->reply->not_found;
  my $name = $c->param('name') or return $c->reply->not_found;
  my $pals = $c->session('pals');
  $pals->{$code} = $name || $code;
  $c->session({pals => $pals});
  $c->render(status => 200, text => '');
};

websocket '/pals' => => sub {
  my $c = shift;
  my $code = $c->session('code') or return;
  my $log = $c->app->log;
  my $redis = $c->redis;
  $c->on(connection => sub {
    $code or return;
    warn "CONNECT\n";
  });
  $c->on(finish => sub {
    $code or return;
    warn "FINISH\n";
    delete $pals->{$code};
  });
  $c->on(message => sub {
    my ($c, $msg) = @_;
    return $c->send(1) if $msg eq '1';
    $code or return $c->send({json => {}});
    if( my $json = j($msg) ) {
      if ( ref $json eq 'HASH' ) {
        return $c->send({json => {}}) unless $json->{lat} && $json->{lng};
        $log->info("$code : $msg");
        $redis->setex("pals.$code" => 3*60 => j([$json->{lat}, $json->{lng}]));
      }
    }
    $pals->{$code}->{last} = $pals->{$code}->{this} if $pals->{$code}->{this};
    $pals->{$code}->{this} = {map { $c->pal_name($_ => j($redis->get("pals.$_"))) } grep { $_ ne $code } map { s/^pals\.//; $_ } @{$redis->keys('pals.*')}};
    my $diff = {
      add => left_diff(map { $pals->{$code}->{$_} } qw/this last/),
      del => left_diff(map { $pals->{$code}->{$_} } qw/last this/),
    };
    #warn Data::Dumper::Dumper($diff);
    $c->send({json => $diff});
  });
};

#use Math::BigFloat;
#Math::BigFloat->precision(-3);
#Mojo::IOLoop->recurring(3 => sub {
#  my $redis = app->redis;
#  my $r = code(1);
#  $redis->setex("pals.$r" => 5 => j([38+Math::BigFloat->new(rand()), -90-Math::BigFloat->new(rand())]));
#  #warn "$r: ".$redis->get("pals.$r");
#});

app->start;

__END__

=head1 COPYRIGHT AND LICENSE
Copyright (C) 2015, Stefan Adams.
This program is free software, you can redistribute it and/or modify it under
the terms of the Artistic License version 2.0.
=cut
